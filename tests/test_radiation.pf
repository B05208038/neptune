module test_radiation
    use funit
    use radiation
    use slam_reduction_class, only: Reduction_type
    use slam_math
    use slam_error_handling
    use satellite
    use solarsystem
    
    implicit none


    contains

   @test
   subroutine test_getShadow()

        class(Radiation_class)                  :: radiation 
        real(dp), dimension(3)                 :: r_sun
        real(dp), dimension(3)                 :: r_sat
        real(dp)                              :: getShadow,expected_shadow

        
       ! Set Up inputs 
                r_sun  = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                r_sat = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                ! Call the subroutine to be tested
                call getShadow(radiation, r_sun, r_sat)
            
                ! Set up expected outputs
                expected_shadow = 1.d0
            
           
        
                ! Check if outputs match expected values
                    @assertEqual(getShadow, expected_shadow)
                   

    end subroutine test_getShadow


    @test
   subroutine test_getSrpAcceleration()

        class(Radiation_class)                  :: radiation 
        type(Satellite_class)               :: satellite_model
        type(Solarsystem_class)             :: solarsystem_model
        type(Reduction_type)               :: reduction
        real(dp), dimension(3)   :: r_gcrf
        real(dp), dimension(3)   :: v_gcrf
        real(dp)                 :: time_mjd, tolerance
    
        real(dp), dimension(3)   :: acc_srp,expected_srp
        logical :: initialized = .false.
                !** init reduction model and EOP
                call initErrorHandler(control = "YES", errAction = "RETURN", traceback = "YES") 
                if (.not. initialized) then 
                    reduction = Reduction_type() 
                    call reduction%initEop('data') 
                    initialized = .true. 
                end if

        
       ! Set Up inputs 
                r_gcrf  = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                v_gcrf = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                time_mjd = 59600
                ! Call the subroutine to be tested
                call getSrpAcceleration(radiation, satellite_model, solarsystem_model, reduction, r_gcrf, v_gcrf, time_mjd, acc_srp)
            
                ! Set up expected outputs
                expected_srp = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                
                ! Set up tolerances
                tolerance = 1e-6_dp
        
                ! Check if outputs match expected values
                    @assertRelativelyEqual(acc_srp, expected_srp, tolerance)
                   
                   

    end subroutine test_getSrpAcceleration

    @test
   subroutine test_getAlbedoAcceleration()

        class(Radiation_class)                  :: radiation 
        type(Satellite_class)               :: satellite_model
        type(Solarsystem_class)             :: solarsystem_model
       type(Reduction_type)               :: reduction
    real(dp), dimension(3)   :: r_gcrf
    real(dp), dimension(3)   :: v_gcrf
    real(dp)                 :: time_mjd, tolerance

    real(dp), dimension(3) :: acc_alb, expected_alb
        logical :: initialized = .false.
                !** init reduction model and EOP
                call initErrorHandler(control = "YES", errAction = "RETURN", traceback = "YES") 
                if (.not. initialized) then 
                    reduction = Reduction_type() 
                    call reduction%initEop('data') 
                    initialized = .true. 
                end if

        
       ! Set Up inputs 
                r_gcrf  = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                v_gcrf = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                time_mjd = 59600
                ! Call the subroutine to be tested
                call getAlbedoAcceleration(radiation, satellite_model, solarsystem_model, reduction, r_gcrf, v_gcrf, time_mjd, expected_alb)
            
                ! Set up expected outputs
                expected_alb = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                
                ! Set up tolerances
                tolerance = 1e-6_dp
        
                ! Check if outputs match expected values
                    @assertRelativelyEqual(acc_alb, expected_alb, tolerance)
                   
                   

    end subroutine test_getAlbedoAcceleration



    

end module test_radiation