module test_radiation
    use funit
    use radiation
    use slam_reduction_class, only: Reduction_type
    use slam_math
    use slam_error_handling
    use satellite
    use solarsystem
    use Neptuneclass
    
    implicit none


    contains

!    @test
!    subroutine test_getShadow()

!         type(Radiation_class)                  :: radiation 
!         real(dp), dimension(3)                 :: r_sun
!         real(dp), dimension(3)                 :: r_sat
!         real                             :: expected_shadow, retreived_shadow

        
!        Set Up inputs 
!                 r_sun  = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
!                 r_sat = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
!           !        Call the subroutine to be tested
!                  retreived_shadow = radiation%getShadow(radiation, r_sun, r_sat)
            
!                 Set up expected outputs
!                 expected_shadow = 1.d0
            
           
        
!                 Check if outputs match expected values
!                     @assertEqual(retreived_shadow, expected_shadow)
                   

!     end subroutine test_getShadow


    @test
   subroutine test_getSrpAcceleration()

        type(Radiation_class)               :: radiation_model 
        type(Satellite_class)               :: satellite_model
        type(Solarsystem_class)             :: solarsystem_model
        type(Reduction_type)               :: reduction_handler
        type(Neptune_class) :: neptune
        real(dp), dimension(3)   :: r_gcrf
        real(dp), dimension(3)   :: v_gcrf
        real(dp)                 :: time_mjd, tolerance
    
        real(dp), dimension(3)   :: acc_srp,expected_srp
        type(time_t) :: epoch 
        logical :: initialized = .false.
        

        
        !** init reduction model and EOP
        call initErrorHandler(control = "YES", errAction = "RETURN", traceback = "YES") 
        if (.not. initialized) then 
            reduction_handler = Reduction_type() 
            call reduction_handler%initEop('../../work/data') 
            initialized = .true. 
        end if
        !** init reduction model and EOP
        
        epoch%mjd = 59600 
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
                                "/home/arkenz/neptune/work/data",  &
                                'DE-421',               &
                                 epoch &
                                )
        satellite_model = Satellite_class()
        satellite_model%mass = 300 
        satellite_model%cdrag = 2.5
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = ORIENT_SPHERE
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        
       ! Set Up inputs 
                r_gcrf  = (/-42044.21889179173, -3193.6719204189853, 7000000.000/)
                v_gcrf = (/0.23272475970034712, -3.0658575760606777, 0.0006346736275647091/)
                time_mjd = 59600
                ! Call the subroutine to be tested
                call radiation_model%getSrpAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_srp)
            
                ! Set up expected outputs
                expected_srp = (/0.0, 0.0, 0.0/)
                
                ! Set up tolerances
                tolerance = 1e-6_dp
        
                ! Check if outputs match expected values
                    @assertEqual(acc_srp(1), expected_srp(1))
                   
                   

    end subroutine test_getSrpAcceleration

!     @test
!    subroutine test_getAlbedoAcceleration()

!         type(Radiation_class)                  :: radiation_model 
!         type(Satellite_class)               :: satellite_model
!         type(Solarsystem_class)             :: solarsystem_model
!        type(Reduction_type)               :: reduction
!     real(dp), dimension(3)   :: r_gcrf
!     real(dp), dimension(3)   :: v_gcrf
!     real(dp)                 :: time_mjd, tolerance

!     real(dp), dimension(3) :: acc_alb, expected_alb
!         logical :: initialized = .false.
!                 !** init reduction model and EOP
!                 call initErrorHandler(control = "YES", errAction = "RETURN", traceback = "YES") 
!                 if (.not. initialized) then 
!                     reduction = Reduction_type() 
!                     call reduction%initEop('data') 
!                     initialized = .true. 
!                 end if

        
!        ! Set Up inputs 
!                 r_gcrf  = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
!                 v_gcrf = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
!                 time_mjd = 59600
!                 ! Call the subroutine to be tested
!                 call radiation_model%getAlbedoAcceleration(satellite_model, solarsystem_model, reduction, r_gcrf, v_gcrf, time_mjd, expected_alb)
            
!                 ! Set up expected outputs
!                 expected_alb = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
                
!                 ! Set up tolerances
!                 tolerance = 1e-6_dp
        
!                 ! Check if outputs match expected values
!                     @assertEqual(acc_alb, expected_alb)
                   
                   

!     end subroutine test_getAlbedoAcceleration



    

end module test_radiation